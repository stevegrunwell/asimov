#!/usr/bin/env bash

# Look through the local filesystem and exclude development dependencies
# from Apple Time Machine backups.
#
# Since these files can be restored easily via their respective installation
# tools, there's no reason to waste time/bandwidth on backing them up.
#
# To retrieve a full list of excluded files, you may run:
#
#   sudo mdfind "com_apple_backup_excludeItem = 'com.apple.backupd'"
#
# For a full explanation, please see https://apple.stackexchange.com/a/25833/206772
#
# @version 0.2.0
# @author  Steve Grunwell
# @license MIT

readonly FILEPATHS=(
    "vendor ../composer.json"
    "node_modules ../package.json"
    ".vagrant ../Vagrantfile"
    "bower_components ../bower.json"
)

readonly DISABLE_SPOTLIGHT_INDEXING=false

# Given a directory path, determine if the corresponding file (relative
# to that directory) is available.
#
# For example, when looking at a /vendor directory, we may choose to
# ensure a composer.json file is available.
dependency_file_exists() {
    read -r path;

    while read -r path; do
        safe_filepath_suffix=$(md5 -qs "$(basename "$path")")
        filename="filepath_${safe_filepath_suffix}"
        if [ -f "${path}/${!filename}" ]; then
            echo "$path"
        fi
    done
}

# Exclude the given path from Time Machine backups.
exclude_file() {
    while read -r path; do
        # Disable Spotlight indexing
        if [ $DISABLE_SPOTLIGHT_INDEXING ] && [ ! -f "${path}/.metadata_never_index" ]; then
            touch "${path}/.metadata_never_index"
            echo "- ${path} has been excluded from Spotlight Index."
        fi

        if tmutil isexcluded "$path" | grep -q '\[Excluded\]'; then
            echo "- ${path} is already excluded, skipping."
            continue
        fi

        tmutil addexclusion "$path"

        sizeondisk=$(du -hs "$path" | cut -f1)
        echo "- ${path} has been excluded from Time Machine backups ($sizeondisk)."
  done
}

# Start to construct the `find` parameter arguments, based on a home directory search
# but excluding ~/Library
find_parameters=(~ -not \( -path ~/Library -prune \))

# Iterate over dependencies.
n=0
for i in "${FILEPATHS[@]}"; do
    read -ra parts <<< "$i"

    # Add this folder to the `find` list, allowing a single `find` command to find all
    if [ "$n" -gt "0" ]; then
        find_parameters+=(-o)
    fi
    find_parameters+=(-name "${parts[0]}" -type d -prune)

    # Set up a variable for lookup in dependency_file_exists, using a hashed name
    # to ensure the variable name is valid
    safe_filepath="filepath_$(md5 -qs "${parts[0]}")"
    declare "$safe_filepath"="${parts[1]}"

    ((n++))
done


echo -e "\\n\\033[0;36mFinding dependency directories with corresponding definition files...\\033[0m\\n"

find "${find_parameters[@]}" | dependency_file_exists | exclude_file
